// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api {

  /// <summary>Holder for reflection information generated from Protos/api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQcm90b3MvYXBpLnByb3RvEgNhcGkiGgoMSGVsbG9SZXF1ZXN0EgoKAmlk",
            "GAEgASgJIj0KDUhlbGxvUmVzcG9uc2USDQoFZm91bmQYASABKAgSHQoLYWxs",
            "b3dlZE1vZHMYAiADKAsyCC5hcGkuTW9kIikKA01vZBIPCgdzdGVhbUlkGAEg",
            "ASgEEhEKCXBhY2thZ2VJZBgCIAEoCSIZCgtTeW5jUmVxdWVzdBIKCgJpZBgB",
            "IAEoCSJpCgxTeW5jUmVzcG9uc2USGwoFc3RhdGUYASABKAsyCi5hcGkuU3Rh",
            "dGVIABIhCghzZXR0aW5ncxgCIAEoCzINLmFwaS5TZXR0aW5nc0gAEhEKB21l",
            "c3NhZ2UYAyABKAlIAEIGCgRwYXJ0IqgBCgVTdGF0ZRIdCgRnYW1lGAEgASgO",
            "Mg8uYXBpLlN0YXRlLkdhbWUSGAoQcGxhbm5lZFN0YXJ0SG91chgCIAEoBRIa",
            "ChJwbGFubmVkU3RhcnRNaW51dGUYAyABKAUiSgoER2FtZRILCgdTVE9QUEVE",
            "EAASDAoIVFJBSU5JTkcQARILCgdQUkVQQVJFEAISCwoHU1RBUlRFRBADEg0K",
            "CUNPTVBMRVRFRBAEImkKCFNldHRpbmdzEhsKBnRyYWl0cxgBIAEoCzILLmFw",
            "aS5UcmFpdHMSGwoGcmlzaW5nGAIgASgLMgsuYXBpLlJpc2luZxIjCgpwdW5p",
            "c2htZW50GAMgASgLMg8uYXBpLlB1bmlzaG1lbnQiWAoGVHJhaXRzEhMKC3Nj",
            "YWxlRmFjdG9yGAEgASgCEhwKFGdvb2RUcmFpdFN1cHByZXNzaW9uGAIgASgC",
            "EhsKE2JhZFRyYWl0U3VwcHJlc3Npb24YAyABKAIiPgoGUmlzaW5nEhwKFG1h",
            "eEZyZWVDb2xvbmlzdENvdW50GAEgASgFEhYKDnJpc2luZ0ludGVydmFsGAIg",
            "ASgFIn4KClB1bmlzaG1lbnQSGwoTcmFuZG9tU3RhcnRQYXVzZU1pbhgBIAEo",
            "BRIbChNyYW5kb21TdGFydFBhdXNlTWF4GAIgASgFEhoKEnN0YXJ0UGF1c2VJ",
            "bnRlcnZhbBgDIAEoBRIaChJmaW5hbFBhdXNlSW50ZXJ2YWwYBCABKAUi/QQK",
            "DFN0YXRzUmVxdWVzdBIKCgJpZBgBIAEoCRIOCgZ3ZWFsdGgYAiABKAUSEAoI",
            "bWFwQ291bnQYAyABKAUSEQoJY29sb25pc3RzGAQgASgFEhwKFGNvbG9uaXN0",
            "c05lZWRUZW5kaW5nGAUgASgFEhkKEW1lZGljYWxDb25kaXRpb25zGAYgASgF",
            "Eg8KB2VuZW1pZXMYByABKAUSEwoLd2lsZEFuaW1hbHMYCCABKAUSFAoMdGFt",
            "ZWRBbmltYWxzGAkgASgFEhAKCHZpc2l0b3JzGAogASgFEhEKCXByaXNvbmVy",
            "cxgLIAEoBRIXCg9kb3duZWRDb2xvbmlzdHMYDCABKAUSFwoPbWVudGFsQ29s",
            "b25pc3RzGA0gASgFEg0KBXJvb21zGA4gASgFEhAKCGNhcmF2YW5zGA8gASgF",
            "EhEKCXdlYXBvbkRwcxgQIAEoBRITCgtlbGVjdHJpY2l0eRgRIAEoBRIQCght",
            "ZWRpY2luZRgSIAEoBRIMCgRmb29kGBMgASgFEgwKBGZpcmUYFCABKAUSEgoK",
            "Y29uZGl0aW9ucxgVIAEoBRITCgt0ZW1wZXJhdHVyZRgWIAEoBRIVCg1udW1S",
            "YWlkc0VuZW15GBcgASgFEhUKDW51bVRocmVhdEJpZ3MYGCABKAUSFwoPY29s",
            "b25pc3RzS2lsbGVkGBkgASgFEhoKEmdyZWF0ZXN0UG9wdWxhdGlvbhgaIAEo",
            "BRITCgtpbkdhbWVIb3VycxgbIAEoBRIYChBkYW1hZ2VUYWtlblBhd25zGBwg",
            "ASgCEhkKEWRhbWFnZVRha2VuVGhpbmdzGB0gASgCEhMKC2RhbWFnZURlYWx0",
            "GB4gASgCIiEKDVN0YXRzUmVzcG9uc2USEAoIaW50ZXJ2YWwYASABKAUiggEK",
            "C0Z1dHVyZUV2ZW50Eg0KBXRpY2tzGAEgASgFEgwKBG5hbWUYAiABKAkSDQoF",
            "cXVlc3QYAyABKAkSDwoHZmFjdGlvbhgEIAEoCRIOCgZwb2ludHMYBSABKAIS",
            "EAoIc3RyYXRlZ3kYBiABKAkSFAoMYXJyaXZhbF9tb2RlGAcgASgJIkIKE0Z1",
            "dHVyZUV2ZW50c1JlcXVlc3QSCgoCaWQYASABKAkSHwoFZXZlbnQYAiADKAsy",
            "EC5hcGkuRnV0dXJlRXZlbnQiFgoURnV0dXJlRXZlbnRzUmVzcG9uc2Uy3wEK",
            "A0FQSRIwCgVIZWxsbxIRLmFwaS5IZWxsb1JlcXVlc3QaEi5hcGkuSGVsbG9S",
            "ZXNwb25zZSIAEi0KBFN5bmMSEC5hcGkuU3luY1JlcXVlc3QaES5hcGkuU3lu",
            "Y1Jlc3BvbnNlIgASMAoFU3RhdHMSES5hcGkuU3RhdHNSZXF1ZXN0GhIuYXBp",
            "LlN0YXRzUmVzcG9uc2UiABJFCgxGdXR1cmVFdmVudHMSGC5hcGkuRnV0dXJl",
            "RXZlbnRzUmVxdWVzdBoZLmFwaS5GdXR1cmVFdmVudHNSZXNwb25zZSIAYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.HelloRequest), global::Api.HelloRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.HelloResponse), global::Api.HelloResponse.Parser, new[]{ "Found", "AllowedMods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Mod), global::Api.Mod.Parser, new[]{ "SteamId", "PackageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.SyncRequest), global::Api.SyncRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.SyncResponse), global::Api.SyncResponse.Parser, new[]{ "State", "Settings", "Message" }, new[]{ "Part" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.State), global::Api.State.Parser, new[]{ "Game", "PlannedStartHour", "PlannedStartMinute" }, null, new[]{ typeof(global::Api.State.Types.Game) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Settings), global::Api.Settings.Parser, new[]{ "Traits", "Rising", "Punishment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Traits), global::Api.Traits.Parser, new[]{ "ScaleFactor", "GoodTraitSuppression", "BadTraitSuppression" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Rising), global::Api.Rising.Parser, new[]{ "MaxFreeColonistCount", "RisingInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Punishment), global::Api.Punishment.Parser, new[]{ "RandomStartPauseMin", "RandomStartPauseMax", "StartPauseInterval", "FinalPauseInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.StatsRequest), global::Api.StatsRequest.Parser, new[]{ "Id", "Wealth", "MapCount", "Colonists", "ColonistsNeedTending", "MedicalConditions", "Enemies", "WildAnimals", "TamedAnimals", "Visitors", "Prisoners", "DownedColonists", "MentalColonists", "Rooms", "Caravans", "WeaponDps", "Electricity", "Medicine", "Food", "Fire", "Conditions", "Temperature", "NumRaidsEnemy", "NumThreatBigs", "ColonistsKilled", "GreatestPopulation", "InGameHours", "DamageTakenPawns", "DamageTakenThings", "DamageDealt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.StatsResponse), global::Api.StatsResponse.Parser, new[]{ "Interval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.FutureEvent), global::Api.FutureEvent.Parser, new[]{ "Ticks", "Name", "Quest", "Faction", "Points", "Strategy", "ArrivalMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.FutureEventsRequest), global::Api.FutureEventsRequest.Parser, new[]{ "Id", "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.FutureEventsResponse), global::Api.FutureEventsResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HelloRequest : pb::IMessage<HelloRequest> {
    private static readonly pb::MessageParser<HelloRequest> _parser = new pb::MessageParser<HelloRequest>(() => new HelloRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloRequest(HelloRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloRequest Clone() {
      return new HelloRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HelloResponse : pb::IMessage<HelloResponse> {
    private static readonly pb::MessageParser<HelloResponse> _parser = new pb::MessageParser<HelloResponse>(() => new HelloResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse(HelloResponse other) : this() {
      found_ = other.found_;
      allowedMods_ = other.allowedMods_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloResponse Clone() {
      return new HelloResponse(this);
    }

    /// <summary>Field number for the "found" field.</summary>
    public const int FoundFieldNumber = 1;
    private bool found_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Found {
      get { return found_; }
      set {
        found_ = value;
      }
    }

    /// <summary>Field number for the "allowedMods" field.</summary>
    public const int AllowedModsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Api.Mod> _repeated_allowedMods_codec
        = pb::FieldCodec.ForMessage(18, global::Api.Mod.Parser);
    private readonly pbc::RepeatedField<global::Api.Mod> allowedMods_ = new pbc::RepeatedField<global::Api.Mod>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.Mod> AllowedMods {
      get { return allowedMods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Found != other.Found) return false;
      if(!allowedMods_.Equals(other.allowedMods_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Found != false) hash ^= Found.GetHashCode();
      hash ^= allowedMods_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Found != false) {
        output.WriteRawTag(8);
        output.WriteBool(Found);
      }
      allowedMods_.WriteTo(output, _repeated_allowedMods_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Found != false) {
        size += 1 + 1;
      }
      size += allowedMods_.CalculateSize(_repeated_allowedMods_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloResponse other) {
      if (other == null) {
        return;
      }
      if (other.Found != false) {
        Found = other.Found;
      }
      allowedMods_.Add(other.allowedMods_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Found = input.ReadBool();
            break;
          }
          case 18: {
            allowedMods_.AddEntriesFrom(input, _repeated_allowedMods_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mod : pb::IMessage<Mod> {
    private static readonly pb::MessageParser<Mod> _parser = new pb::MessageParser<Mod>(() => new Mod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mod(Mod other) : this() {
      steamId_ = other.steamId_;
      packageId_ = other.packageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mod Clone() {
      return new Mod(this);
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private ulong steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SteamId {
      get { return steamId_; }
      set {
        steamId_ = value;
      }
    }

    /// <summary>Field number for the "packageId" field.</summary>
    public const int PackageIdFieldNumber = 2;
    private string packageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageId {
      get { return packageId_; }
      set {
        packageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      if (PackageId != other.PackageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId != 0UL) hash ^= SteamId.GetHashCode();
      if (PackageId.Length != 0) hash ^= PackageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SteamId);
      }
      if (PackageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PackageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SteamId);
      }
      if (PackageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mod other) {
      if (other == null) {
        return;
      }
      if (other.SteamId != 0UL) {
        SteamId = other.SteamId;
      }
      if (other.PackageId.Length != 0) {
        PackageId = other.PackageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SteamId = input.ReadUInt64();
            break;
          }
          case 18: {
            PackageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncRequest : pb::IMessage<SyncRequest> {
    private static readonly pb::MessageParser<SyncRequest> _parser = new pb::MessageParser<SyncRequest>(() => new SyncRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncRequest(SyncRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncRequest Clone() {
      return new SyncRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncResponse : pb::IMessage<SyncResponse> {
    private static readonly pb::MessageParser<SyncResponse> _parser = new pb::MessageParser<SyncResponse>(() => new SyncResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncResponse(SyncResponse other) : this() {
      switch (other.PartCase) {
        case PartOneofCase.State:
          State = other.State.Clone();
          break;
        case PartOneofCase.Settings:
          Settings = other.Settings.Clone();
          break;
        case PartOneofCase.Message:
          Message = other.Message;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncResponse Clone() {
      return new SyncResponse(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.State State {
      get { return partCase_ == PartOneofCase.State ? (global::Api.State) part_ : null; }
      set {
        part_ = value;
        partCase_ = value == null ? PartOneofCase.None : PartOneofCase.State;
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Settings Settings {
      get { return partCase_ == PartOneofCase.Settings ? (global::Api.Settings) part_ : null; }
      set {
        part_ = value;
        partCase_ = value == null ? PartOneofCase.None : PartOneofCase.Settings;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return partCase_ == PartOneofCase.Message ? (string) part_ : ""; }
      set {
        part_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        partCase_ = PartOneofCase.Message;
      }
    }

    private object part_;
    /// <summary>Enum of possible cases for the "part" oneof.</summary>
    public enum PartOneofCase {
      None = 0,
      State = 1,
      Settings = 2,
      Message = 3,
    }
    private PartOneofCase partCase_ = PartOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOneofCase PartCase {
      get { return partCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPart() {
      partCase_ = PartOneofCase.None;
      part_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if (Message != other.Message) return false;
      if (PartCase != other.PartCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partCase_ == PartOneofCase.State) hash ^= State.GetHashCode();
      if (partCase_ == PartOneofCase.Settings) hash ^= Settings.GetHashCode();
      if (partCase_ == PartOneofCase.Message) hash ^= Message.GetHashCode();
      hash ^= (int) partCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partCase_ == PartOneofCase.State) {
        output.WriteRawTag(10);
        output.WriteMessage(State);
      }
      if (partCase_ == PartOneofCase.Settings) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
      if (partCase_ == PartOneofCase.Message) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partCase_ == PartOneofCase.State) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (partCase_ == PartOneofCase.Settings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (partCase_ == PartOneofCase.Message) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncResponse other) {
      if (other == null) {
        return;
      }
      switch (other.PartCase) {
        case PartOneofCase.State:
          if (State == null) {
            State = new global::Api.State();
          }
          State.MergeFrom(other.State);
          break;
        case PartOneofCase.Settings:
          if (Settings == null) {
            Settings = new global::Api.Settings();
          }
          Settings.MergeFrom(other.Settings);
          break;
        case PartOneofCase.Message:
          Message = other.Message;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Api.State subBuilder = new global::Api.State();
            if (partCase_ == PartOneofCase.State) {
              subBuilder.MergeFrom(State);
            }
            input.ReadMessage(subBuilder);
            State = subBuilder;
            break;
          }
          case 18: {
            global::Api.Settings subBuilder = new global::Api.Settings();
            if (partCase_ == PartOneofCase.Settings) {
              subBuilder.MergeFrom(Settings);
            }
            input.ReadMessage(subBuilder);
            Settings = subBuilder;
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class State : pb::IMessage<State> {
    private static readonly pb::MessageParser<State> _parser = new pb::MessageParser<State>(() => new State());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<State> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State(State other) : this() {
      game_ = other.game_;
      plannedStartHour_ = other.plannedStartHour_;
      plannedStartMinute_ = other.plannedStartMinute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public State Clone() {
      return new State(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::Api.State.Types.Game game_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.State.Types.Game Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "plannedStartHour" field.</summary>
    public const int PlannedStartHourFieldNumber = 2;
    private int plannedStartHour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlannedStartHour {
      get { return plannedStartHour_; }
      set {
        plannedStartHour_ = value;
      }
    }

    /// <summary>Field number for the "plannedStartMinute" field.</summary>
    public const int PlannedStartMinuteFieldNumber = 3;
    private int plannedStartMinute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlannedStartMinute {
      get { return plannedStartMinute_; }
      set {
        plannedStartMinute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as State);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(State other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (PlannedStartHour != other.PlannedStartHour) return false;
      if (PlannedStartMinute != other.PlannedStartMinute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (PlannedStartHour != 0) hash ^= PlannedStartHour.GetHashCode();
      if (PlannedStartMinute != 0) hash ^= PlannedStartMinute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Game);
      }
      if (PlannedStartHour != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlannedStartHour);
      }
      if (PlannedStartMinute != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlannedStartMinute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Game);
      }
      if (PlannedStartHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlannedStartHour);
      }
      if (PlannedStartMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlannedStartMinute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(State other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.PlannedStartHour != 0) {
        PlannedStartHour = other.PlannedStartHour;
      }
      if (other.PlannedStartMinute != 0) {
        PlannedStartMinute = other.PlannedStartMinute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            game_ = (global::Api.State.Types.Game) input.ReadEnum();
            break;
          }
          case 16: {
            PlannedStartHour = input.ReadInt32();
            break;
          }
          case 24: {
            PlannedStartMinute = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the State message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Game {
        [pbr::OriginalName("STOPPED")] Stopped = 0,
        [pbr::OriginalName("TRAINING")] Training = 1,
        [pbr::OriginalName("PREPARE")] Prepare = 2,
        [pbr::OriginalName("STARTED")] Started = 3,
        [pbr::OriginalName("COMPLETED")] Completed = 4,
      }

    }
    #endregion

  }

  public sealed partial class Settings : pb::IMessage<Settings> {
    private static readonly pb::MessageParser<Settings> _parser = new pb::MessageParser<Settings>(() => new Settings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Settings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings(Settings other) : this() {
      traits_ = other.traits_ != null ? other.traits_.Clone() : null;
      rising_ = other.rising_ != null ? other.rising_.Clone() : null;
      punishment_ = other.punishment_ != null ? other.punishment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings Clone() {
      return new Settings(this);
    }

    /// <summary>Field number for the "traits" field.</summary>
    public const int TraitsFieldNumber = 1;
    private global::Api.Traits traits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Traits Traits {
      get { return traits_; }
      set {
        traits_ = value;
      }
    }

    /// <summary>Field number for the "rising" field.</summary>
    public const int RisingFieldNumber = 2;
    private global::Api.Rising rising_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Rising Rising {
      get { return rising_; }
      set {
        rising_ = value;
      }
    }

    /// <summary>Field number for the "punishment" field.</summary>
    public const int PunishmentFieldNumber = 3;
    private global::Api.Punishment punishment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Punishment Punishment {
      get { return punishment_; }
      set {
        punishment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Settings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Settings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Traits, other.Traits)) return false;
      if (!object.Equals(Rising, other.Rising)) return false;
      if (!object.Equals(Punishment, other.Punishment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (traits_ != null) hash ^= Traits.GetHashCode();
      if (rising_ != null) hash ^= Rising.GetHashCode();
      if (punishment_ != null) hash ^= Punishment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (traits_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Traits);
      }
      if (rising_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rising);
      }
      if (punishment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Punishment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (traits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Traits);
      }
      if (rising_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rising);
      }
      if (punishment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Punishment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Settings other) {
      if (other == null) {
        return;
      }
      if (other.traits_ != null) {
        if (traits_ == null) {
          traits_ = new global::Api.Traits();
        }
        Traits.MergeFrom(other.Traits);
      }
      if (other.rising_ != null) {
        if (rising_ == null) {
          rising_ = new global::Api.Rising();
        }
        Rising.MergeFrom(other.Rising);
      }
      if (other.punishment_ != null) {
        if (punishment_ == null) {
          punishment_ = new global::Api.Punishment();
        }
        Punishment.MergeFrom(other.Punishment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (traits_ == null) {
              traits_ = new global::Api.Traits();
            }
            input.ReadMessage(traits_);
            break;
          }
          case 18: {
            if (rising_ == null) {
              rising_ = new global::Api.Rising();
            }
            input.ReadMessage(rising_);
            break;
          }
          case 26: {
            if (punishment_ == null) {
              punishment_ = new global::Api.Punishment();
            }
            input.ReadMessage(punishment_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Traits : pb::IMessage<Traits> {
    private static readonly pb::MessageParser<Traits> _parser = new pb::MessageParser<Traits>(() => new Traits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Traits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Traits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Traits(Traits other) : this() {
      scaleFactor_ = other.scaleFactor_;
      goodTraitSuppression_ = other.goodTraitSuppression_;
      badTraitSuppression_ = other.badTraitSuppression_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Traits Clone() {
      return new Traits(this);
    }

    /// <summary>Field number for the "scaleFactor" field.</summary>
    public const int ScaleFactorFieldNumber = 1;
    private float scaleFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleFactor {
      get { return scaleFactor_; }
      set {
        scaleFactor_ = value;
      }
    }

    /// <summary>Field number for the "goodTraitSuppression" field.</summary>
    public const int GoodTraitSuppressionFieldNumber = 2;
    private float goodTraitSuppression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GoodTraitSuppression {
      get { return goodTraitSuppression_; }
      set {
        goodTraitSuppression_ = value;
      }
    }

    /// <summary>Field number for the "badTraitSuppression" field.</summary>
    public const int BadTraitSuppressionFieldNumber = 3;
    private float badTraitSuppression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BadTraitSuppression {
      get { return badTraitSuppression_; }
      set {
        badTraitSuppression_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Traits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Traits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleFactor, other.ScaleFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GoodTraitSuppression, other.GoodTraitSuppression)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BadTraitSuppression, other.BadTraitSuppression)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScaleFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleFactor);
      if (GoodTraitSuppression != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GoodTraitSuppression);
      if (BadTraitSuppression != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BadTraitSuppression);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScaleFactor != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(ScaleFactor);
      }
      if (GoodTraitSuppression != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GoodTraitSuppression);
      }
      if (BadTraitSuppression != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BadTraitSuppression);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScaleFactor != 0F) {
        size += 1 + 4;
      }
      if (GoodTraitSuppression != 0F) {
        size += 1 + 4;
      }
      if (BadTraitSuppression != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Traits other) {
      if (other == null) {
        return;
      }
      if (other.ScaleFactor != 0F) {
        ScaleFactor = other.ScaleFactor;
      }
      if (other.GoodTraitSuppression != 0F) {
        GoodTraitSuppression = other.GoodTraitSuppression;
      }
      if (other.BadTraitSuppression != 0F) {
        BadTraitSuppression = other.BadTraitSuppression;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ScaleFactor = input.ReadFloat();
            break;
          }
          case 21: {
            GoodTraitSuppression = input.ReadFloat();
            break;
          }
          case 29: {
            BadTraitSuppression = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rising : pb::IMessage<Rising> {
    private static readonly pb::MessageParser<Rising> _parser = new pb::MessageParser<Rising>(() => new Rising());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rising> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rising() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rising(Rising other) : this() {
      maxFreeColonistCount_ = other.maxFreeColonistCount_;
      risingInterval_ = other.risingInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rising Clone() {
      return new Rising(this);
    }

    /// <summary>Field number for the "maxFreeColonistCount" field.</summary>
    public const int MaxFreeColonistCountFieldNumber = 1;
    private int maxFreeColonistCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFreeColonistCount {
      get { return maxFreeColonistCount_; }
      set {
        maxFreeColonistCount_ = value;
      }
    }

    /// <summary>Field number for the "risingInterval" field.</summary>
    public const int RisingIntervalFieldNumber = 2;
    private int risingInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RisingInterval {
      get { return risingInterval_; }
      set {
        risingInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rising);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rising other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxFreeColonistCount != other.MaxFreeColonistCount) return false;
      if (RisingInterval != other.RisingInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxFreeColonistCount != 0) hash ^= MaxFreeColonistCount.GetHashCode();
      if (RisingInterval != 0) hash ^= RisingInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxFreeColonistCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxFreeColonistCount);
      }
      if (RisingInterval != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RisingInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxFreeColonistCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFreeColonistCount);
      }
      if (RisingInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RisingInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rising other) {
      if (other == null) {
        return;
      }
      if (other.MaxFreeColonistCount != 0) {
        MaxFreeColonistCount = other.MaxFreeColonistCount;
      }
      if (other.RisingInterval != 0) {
        RisingInterval = other.RisingInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxFreeColonistCount = input.ReadInt32();
            break;
          }
          case 16: {
            RisingInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Punishment : pb::IMessage<Punishment> {
    private static readonly pb::MessageParser<Punishment> _parser = new pb::MessageParser<Punishment>(() => new Punishment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Punishment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Punishment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Punishment(Punishment other) : this() {
      randomStartPauseMin_ = other.randomStartPauseMin_;
      randomStartPauseMax_ = other.randomStartPauseMax_;
      startPauseInterval_ = other.startPauseInterval_;
      finalPauseInterval_ = other.finalPauseInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Punishment Clone() {
      return new Punishment(this);
    }

    /// <summary>Field number for the "randomStartPauseMin" field.</summary>
    public const int RandomStartPauseMinFieldNumber = 1;
    private int randomStartPauseMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomStartPauseMin {
      get { return randomStartPauseMin_; }
      set {
        randomStartPauseMin_ = value;
      }
    }

    /// <summary>Field number for the "randomStartPauseMax" field.</summary>
    public const int RandomStartPauseMaxFieldNumber = 2;
    private int randomStartPauseMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomStartPauseMax {
      get { return randomStartPauseMax_; }
      set {
        randomStartPauseMax_ = value;
      }
    }

    /// <summary>Field number for the "startPauseInterval" field.</summary>
    public const int StartPauseIntervalFieldNumber = 3;
    private int startPauseInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartPauseInterval {
      get { return startPauseInterval_; }
      set {
        startPauseInterval_ = value;
      }
    }

    /// <summary>Field number for the "finalPauseInterval" field.</summary>
    public const int FinalPauseIntervalFieldNumber = 4;
    private int finalPauseInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalPauseInterval {
      get { return finalPauseInterval_; }
      set {
        finalPauseInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Punishment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Punishment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandomStartPauseMin != other.RandomStartPauseMin) return false;
      if (RandomStartPauseMax != other.RandomStartPauseMax) return false;
      if (StartPauseInterval != other.StartPauseInterval) return false;
      if (FinalPauseInterval != other.FinalPauseInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandomStartPauseMin != 0) hash ^= RandomStartPauseMin.GetHashCode();
      if (RandomStartPauseMax != 0) hash ^= RandomStartPauseMax.GetHashCode();
      if (StartPauseInterval != 0) hash ^= StartPauseInterval.GetHashCode();
      if (FinalPauseInterval != 0) hash ^= FinalPauseInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RandomStartPauseMin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandomStartPauseMin);
      }
      if (RandomStartPauseMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RandomStartPauseMax);
      }
      if (StartPauseInterval != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartPauseInterval);
      }
      if (FinalPauseInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalPauseInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandomStartPauseMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomStartPauseMin);
      }
      if (RandomStartPauseMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomStartPauseMax);
      }
      if (StartPauseInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPauseInterval);
      }
      if (FinalPauseInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalPauseInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Punishment other) {
      if (other == null) {
        return;
      }
      if (other.RandomStartPauseMin != 0) {
        RandomStartPauseMin = other.RandomStartPauseMin;
      }
      if (other.RandomStartPauseMax != 0) {
        RandomStartPauseMax = other.RandomStartPauseMax;
      }
      if (other.StartPauseInterval != 0) {
        StartPauseInterval = other.StartPauseInterval;
      }
      if (other.FinalPauseInterval != 0) {
        FinalPauseInterval = other.FinalPauseInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandomStartPauseMin = input.ReadInt32();
            break;
          }
          case 16: {
            RandomStartPauseMax = input.ReadInt32();
            break;
          }
          case 24: {
            StartPauseInterval = input.ReadInt32();
            break;
          }
          case 32: {
            FinalPauseInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatsRequest : pb::IMessage<StatsRequest> {
    private static readonly pb::MessageParser<StatsRequest> _parser = new pb::MessageParser<StatsRequest>(() => new StatsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsRequest(StatsRequest other) : this() {
      id_ = other.id_;
      wealth_ = other.wealth_;
      mapCount_ = other.mapCount_;
      colonists_ = other.colonists_;
      colonistsNeedTending_ = other.colonistsNeedTending_;
      medicalConditions_ = other.medicalConditions_;
      enemies_ = other.enemies_;
      wildAnimals_ = other.wildAnimals_;
      tamedAnimals_ = other.tamedAnimals_;
      visitors_ = other.visitors_;
      prisoners_ = other.prisoners_;
      downedColonists_ = other.downedColonists_;
      mentalColonists_ = other.mentalColonists_;
      rooms_ = other.rooms_;
      caravans_ = other.caravans_;
      weaponDps_ = other.weaponDps_;
      electricity_ = other.electricity_;
      medicine_ = other.medicine_;
      food_ = other.food_;
      fire_ = other.fire_;
      conditions_ = other.conditions_;
      temperature_ = other.temperature_;
      numRaidsEnemy_ = other.numRaidsEnemy_;
      numThreatBigs_ = other.numThreatBigs_;
      colonistsKilled_ = other.colonistsKilled_;
      greatestPopulation_ = other.greatestPopulation_;
      inGameHours_ = other.inGameHours_;
      damageTakenPawns_ = other.damageTakenPawns_;
      damageTakenThings_ = other.damageTakenThings_;
      damageDealt_ = other.damageDealt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsRequest Clone() {
      return new StatsRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wealth" field.</summary>
    public const int WealthFieldNumber = 2;
    private int wealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wealth {
      get { return wealth_; }
      set {
        wealth_ = value;
      }
    }

    /// <summary>Field number for the "mapCount" field.</summary>
    public const int MapCountFieldNumber = 3;
    private int mapCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCount {
      get { return mapCount_; }
      set {
        mapCount_ = value;
      }
    }

    /// <summary>Field number for the "colonists" field.</summary>
    public const int ColonistsFieldNumber = 4;
    private int colonists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Colonists {
      get { return colonists_; }
      set {
        colonists_ = value;
      }
    }

    /// <summary>Field number for the "colonistsNeedTending" field.</summary>
    public const int ColonistsNeedTendingFieldNumber = 5;
    private int colonistsNeedTending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColonistsNeedTending {
      get { return colonistsNeedTending_; }
      set {
        colonistsNeedTending_ = value;
      }
    }

    /// <summary>Field number for the "medicalConditions" field.</summary>
    public const int MedicalConditionsFieldNumber = 6;
    private int medicalConditions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MedicalConditions {
      get { return medicalConditions_; }
      set {
        medicalConditions_ = value;
      }
    }

    /// <summary>Field number for the "enemies" field.</summary>
    public const int EnemiesFieldNumber = 7;
    private int enemies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enemies {
      get { return enemies_; }
      set {
        enemies_ = value;
      }
    }

    /// <summary>Field number for the "wildAnimals" field.</summary>
    public const int WildAnimalsFieldNumber = 8;
    private int wildAnimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WildAnimals {
      get { return wildAnimals_; }
      set {
        wildAnimals_ = value;
      }
    }

    /// <summary>Field number for the "tamedAnimals" field.</summary>
    public const int TamedAnimalsFieldNumber = 9;
    private int tamedAnimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TamedAnimals {
      get { return tamedAnimals_; }
      set {
        tamedAnimals_ = value;
      }
    }

    /// <summary>Field number for the "visitors" field.</summary>
    public const int VisitorsFieldNumber = 10;
    private int visitors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Visitors {
      get { return visitors_; }
      set {
        visitors_ = value;
      }
    }

    /// <summary>Field number for the "prisoners" field.</summary>
    public const int PrisonersFieldNumber = 11;
    private int prisoners_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Prisoners {
      get { return prisoners_; }
      set {
        prisoners_ = value;
      }
    }

    /// <summary>Field number for the "downedColonists" field.</summary>
    public const int DownedColonistsFieldNumber = 12;
    private int downedColonists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownedColonists {
      get { return downedColonists_; }
      set {
        downedColonists_ = value;
      }
    }

    /// <summary>Field number for the "mentalColonists" field.</summary>
    public const int MentalColonistsFieldNumber = 13;
    private int mentalColonists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MentalColonists {
      get { return mentalColonists_; }
      set {
        mentalColonists_ = value;
      }
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 14;
    private int rooms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rooms {
      get { return rooms_; }
      set {
        rooms_ = value;
      }
    }

    /// <summary>Field number for the "caravans" field.</summary>
    public const int CaravansFieldNumber = 15;
    private int caravans_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Caravans {
      get { return caravans_; }
      set {
        caravans_ = value;
      }
    }

    /// <summary>Field number for the "weaponDps" field.</summary>
    public const int WeaponDpsFieldNumber = 16;
    private int weaponDps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponDps {
      get { return weaponDps_; }
      set {
        weaponDps_ = value;
      }
    }

    /// <summary>Field number for the "electricity" field.</summary>
    public const int ElectricityFieldNumber = 17;
    private int electricity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Electricity {
      get { return electricity_; }
      set {
        electricity_ = value;
      }
    }

    /// <summary>Field number for the "medicine" field.</summary>
    public const int MedicineFieldNumber = 18;
    private int medicine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Medicine {
      get { return medicine_; }
      set {
        medicine_ = value;
      }
    }

    /// <summary>Field number for the "food" field.</summary>
    public const int FoodFieldNumber = 19;
    private int food_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Food {
      get { return food_; }
      set {
        food_ = value;
      }
    }

    /// <summary>Field number for the "fire" field.</summary>
    public const int FireFieldNumber = 20;
    private int fire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fire {
      get { return fire_; }
      set {
        fire_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 21;
    private int conditions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Conditions {
      get { return conditions_; }
      set {
        conditions_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 22;
    private int temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "numRaidsEnemy" field.</summary>
    public const int NumRaidsEnemyFieldNumber = 23;
    private int numRaidsEnemy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRaidsEnemy {
      get { return numRaidsEnemy_; }
      set {
        numRaidsEnemy_ = value;
      }
    }

    /// <summary>Field number for the "numThreatBigs" field.</summary>
    public const int NumThreatBigsFieldNumber = 24;
    private int numThreatBigs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumThreatBigs {
      get { return numThreatBigs_; }
      set {
        numThreatBigs_ = value;
      }
    }

    /// <summary>Field number for the "colonistsKilled" field.</summary>
    public const int ColonistsKilledFieldNumber = 25;
    private int colonistsKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColonistsKilled {
      get { return colonistsKilled_; }
      set {
        colonistsKilled_ = value;
      }
    }

    /// <summary>Field number for the "greatestPopulation" field.</summary>
    public const int GreatestPopulationFieldNumber = 26;
    private int greatestPopulation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GreatestPopulation {
      get { return greatestPopulation_; }
      set {
        greatestPopulation_ = value;
      }
    }

    /// <summary>Field number for the "inGameHours" field.</summary>
    public const int InGameHoursFieldNumber = 27;
    private int inGameHours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InGameHours {
      get { return inGameHours_; }
      set {
        inGameHours_ = value;
      }
    }

    /// <summary>Field number for the "damageTakenPawns" field.</summary>
    public const int DamageTakenPawnsFieldNumber = 28;
    private float damageTakenPawns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageTakenPawns {
      get { return damageTakenPawns_; }
      set {
        damageTakenPawns_ = value;
      }
    }

    /// <summary>Field number for the "damageTakenThings" field.</summary>
    public const int DamageTakenThingsFieldNumber = 29;
    private float damageTakenThings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageTakenThings {
      get { return damageTakenThings_; }
      set {
        damageTakenThings_ = value;
      }
    }

    /// <summary>Field number for the "damageDealt" field.</summary>
    public const int DamageDealtFieldNumber = 30;
    private float damageDealt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageDealt {
      get { return damageDealt_; }
      set {
        damageDealt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Wealth != other.Wealth) return false;
      if (MapCount != other.MapCount) return false;
      if (Colonists != other.Colonists) return false;
      if (ColonistsNeedTending != other.ColonistsNeedTending) return false;
      if (MedicalConditions != other.MedicalConditions) return false;
      if (Enemies != other.Enemies) return false;
      if (WildAnimals != other.WildAnimals) return false;
      if (TamedAnimals != other.TamedAnimals) return false;
      if (Visitors != other.Visitors) return false;
      if (Prisoners != other.Prisoners) return false;
      if (DownedColonists != other.DownedColonists) return false;
      if (MentalColonists != other.MentalColonists) return false;
      if (Rooms != other.Rooms) return false;
      if (Caravans != other.Caravans) return false;
      if (WeaponDps != other.WeaponDps) return false;
      if (Electricity != other.Electricity) return false;
      if (Medicine != other.Medicine) return false;
      if (Food != other.Food) return false;
      if (Fire != other.Fire) return false;
      if (Conditions != other.Conditions) return false;
      if (Temperature != other.Temperature) return false;
      if (NumRaidsEnemy != other.NumRaidsEnemy) return false;
      if (NumThreatBigs != other.NumThreatBigs) return false;
      if (ColonistsKilled != other.ColonistsKilled) return false;
      if (GreatestPopulation != other.GreatestPopulation) return false;
      if (InGameHours != other.InGameHours) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageTakenPawns, other.DamageTakenPawns)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageTakenThings, other.DamageTakenThings)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageDealt, other.DamageDealt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Wealth != 0) hash ^= Wealth.GetHashCode();
      if (MapCount != 0) hash ^= MapCount.GetHashCode();
      if (Colonists != 0) hash ^= Colonists.GetHashCode();
      if (ColonistsNeedTending != 0) hash ^= ColonistsNeedTending.GetHashCode();
      if (MedicalConditions != 0) hash ^= MedicalConditions.GetHashCode();
      if (Enemies != 0) hash ^= Enemies.GetHashCode();
      if (WildAnimals != 0) hash ^= WildAnimals.GetHashCode();
      if (TamedAnimals != 0) hash ^= TamedAnimals.GetHashCode();
      if (Visitors != 0) hash ^= Visitors.GetHashCode();
      if (Prisoners != 0) hash ^= Prisoners.GetHashCode();
      if (DownedColonists != 0) hash ^= DownedColonists.GetHashCode();
      if (MentalColonists != 0) hash ^= MentalColonists.GetHashCode();
      if (Rooms != 0) hash ^= Rooms.GetHashCode();
      if (Caravans != 0) hash ^= Caravans.GetHashCode();
      if (WeaponDps != 0) hash ^= WeaponDps.GetHashCode();
      if (Electricity != 0) hash ^= Electricity.GetHashCode();
      if (Medicine != 0) hash ^= Medicine.GetHashCode();
      if (Food != 0) hash ^= Food.GetHashCode();
      if (Fire != 0) hash ^= Fire.GetHashCode();
      if (Conditions != 0) hash ^= Conditions.GetHashCode();
      if (Temperature != 0) hash ^= Temperature.GetHashCode();
      if (NumRaidsEnemy != 0) hash ^= NumRaidsEnemy.GetHashCode();
      if (NumThreatBigs != 0) hash ^= NumThreatBigs.GetHashCode();
      if (ColonistsKilled != 0) hash ^= ColonistsKilled.GetHashCode();
      if (GreatestPopulation != 0) hash ^= GreatestPopulation.GetHashCode();
      if (InGameHours != 0) hash ^= InGameHours.GetHashCode();
      if (DamageTakenPawns != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageTakenPawns);
      if (DamageTakenThings != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageTakenThings);
      if (DamageDealt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageDealt);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Wealth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Wealth);
      }
      if (MapCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapCount);
      }
      if (Colonists != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Colonists);
      }
      if (ColonistsNeedTending != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ColonistsNeedTending);
      }
      if (MedicalConditions != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MedicalConditions);
      }
      if (Enemies != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Enemies);
      }
      if (WildAnimals != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WildAnimals);
      }
      if (TamedAnimals != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TamedAnimals);
      }
      if (Visitors != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Visitors);
      }
      if (Prisoners != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Prisoners);
      }
      if (DownedColonists != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DownedColonists);
      }
      if (MentalColonists != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MentalColonists);
      }
      if (Rooms != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Rooms);
      }
      if (Caravans != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Caravans);
      }
      if (WeaponDps != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(WeaponDps);
      }
      if (Electricity != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Electricity);
      }
      if (Medicine != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Medicine);
      }
      if (Food != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Food);
      }
      if (Fire != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Fire);
      }
      if (Conditions != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Conditions);
      }
      if (Temperature != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Temperature);
      }
      if (NumRaidsEnemy != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(NumRaidsEnemy);
      }
      if (NumThreatBigs != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(NumThreatBigs);
      }
      if (ColonistsKilled != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ColonistsKilled);
      }
      if (GreatestPopulation != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(GreatestPopulation);
      }
      if (InGameHours != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(InGameHours);
      }
      if (DamageTakenPawns != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(DamageTakenPawns);
      }
      if (DamageTakenThings != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(DamageTakenThings);
      }
      if (DamageDealt != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(DamageDealt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Wealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wealth);
      }
      if (MapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCount);
      }
      if (Colonists != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Colonists);
      }
      if (ColonistsNeedTending != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColonistsNeedTending);
      }
      if (MedicalConditions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MedicalConditions);
      }
      if (Enemies != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enemies);
      }
      if (WildAnimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WildAnimals);
      }
      if (TamedAnimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TamedAnimals);
      }
      if (Visitors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Visitors);
      }
      if (Prisoners != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prisoners);
      }
      if (DownedColonists != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DownedColonists);
      }
      if (MentalColonists != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MentalColonists);
      }
      if (Rooms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rooms);
      }
      if (Caravans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Caravans);
      }
      if (WeaponDps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponDps);
      }
      if (Electricity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Electricity);
      }
      if (Medicine != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Medicine);
      }
      if (Food != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Food);
      }
      if (Fire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Fire);
      }
      if (Conditions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Conditions);
      }
      if (Temperature != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Temperature);
      }
      if (NumRaidsEnemy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumRaidsEnemy);
      }
      if (NumThreatBigs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumThreatBigs);
      }
      if (ColonistsKilled != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ColonistsKilled);
      }
      if (GreatestPopulation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GreatestPopulation);
      }
      if (InGameHours != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InGameHours);
      }
      if (DamageTakenPawns != 0F) {
        size += 2 + 4;
      }
      if (DamageTakenThings != 0F) {
        size += 2 + 4;
      }
      if (DamageDealt != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Wealth != 0) {
        Wealth = other.Wealth;
      }
      if (other.MapCount != 0) {
        MapCount = other.MapCount;
      }
      if (other.Colonists != 0) {
        Colonists = other.Colonists;
      }
      if (other.ColonistsNeedTending != 0) {
        ColonistsNeedTending = other.ColonistsNeedTending;
      }
      if (other.MedicalConditions != 0) {
        MedicalConditions = other.MedicalConditions;
      }
      if (other.Enemies != 0) {
        Enemies = other.Enemies;
      }
      if (other.WildAnimals != 0) {
        WildAnimals = other.WildAnimals;
      }
      if (other.TamedAnimals != 0) {
        TamedAnimals = other.TamedAnimals;
      }
      if (other.Visitors != 0) {
        Visitors = other.Visitors;
      }
      if (other.Prisoners != 0) {
        Prisoners = other.Prisoners;
      }
      if (other.DownedColonists != 0) {
        DownedColonists = other.DownedColonists;
      }
      if (other.MentalColonists != 0) {
        MentalColonists = other.MentalColonists;
      }
      if (other.Rooms != 0) {
        Rooms = other.Rooms;
      }
      if (other.Caravans != 0) {
        Caravans = other.Caravans;
      }
      if (other.WeaponDps != 0) {
        WeaponDps = other.WeaponDps;
      }
      if (other.Electricity != 0) {
        Electricity = other.Electricity;
      }
      if (other.Medicine != 0) {
        Medicine = other.Medicine;
      }
      if (other.Food != 0) {
        Food = other.Food;
      }
      if (other.Fire != 0) {
        Fire = other.Fire;
      }
      if (other.Conditions != 0) {
        Conditions = other.Conditions;
      }
      if (other.Temperature != 0) {
        Temperature = other.Temperature;
      }
      if (other.NumRaidsEnemy != 0) {
        NumRaidsEnemy = other.NumRaidsEnemy;
      }
      if (other.NumThreatBigs != 0) {
        NumThreatBigs = other.NumThreatBigs;
      }
      if (other.ColonistsKilled != 0) {
        ColonistsKilled = other.ColonistsKilled;
      }
      if (other.GreatestPopulation != 0) {
        GreatestPopulation = other.GreatestPopulation;
      }
      if (other.InGameHours != 0) {
        InGameHours = other.InGameHours;
      }
      if (other.DamageTakenPawns != 0F) {
        DamageTakenPawns = other.DamageTakenPawns;
      }
      if (other.DamageTakenThings != 0F) {
        DamageTakenThings = other.DamageTakenThings;
      }
      if (other.DamageDealt != 0F) {
        DamageDealt = other.DamageDealt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Wealth = input.ReadInt32();
            break;
          }
          case 24: {
            MapCount = input.ReadInt32();
            break;
          }
          case 32: {
            Colonists = input.ReadInt32();
            break;
          }
          case 40: {
            ColonistsNeedTending = input.ReadInt32();
            break;
          }
          case 48: {
            MedicalConditions = input.ReadInt32();
            break;
          }
          case 56: {
            Enemies = input.ReadInt32();
            break;
          }
          case 64: {
            WildAnimals = input.ReadInt32();
            break;
          }
          case 72: {
            TamedAnimals = input.ReadInt32();
            break;
          }
          case 80: {
            Visitors = input.ReadInt32();
            break;
          }
          case 88: {
            Prisoners = input.ReadInt32();
            break;
          }
          case 96: {
            DownedColonists = input.ReadInt32();
            break;
          }
          case 104: {
            MentalColonists = input.ReadInt32();
            break;
          }
          case 112: {
            Rooms = input.ReadInt32();
            break;
          }
          case 120: {
            Caravans = input.ReadInt32();
            break;
          }
          case 128: {
            WeaponDps = input.ReadInt32();
            break;
          }
          case 136: {
            Electricity = input.ReadInt32();
            break;
          }
          case 144: {
            Medicine = input.ReadInt32();
            break;
          }
          case 152: {
            Food = input.ReadInt32();
            break;
          }
          case 160: {
            Fire = input.ReadInt32();
            break;
          }
          case 168: {
            Conditions = input.ReadInt32();
            break;
          }
          case 176: {
            Temperature = input.ReadInt32();
            break;
          }
          case 184: {
            NumRaidsEnemy = input.ReadInt32();
            break;
          }
          case 192: {
            NumThreatBigs = input.ReadInt32();
            break;
          }
          case 200: {
            ColonistsKilled = input.ReadInt32();
            break;
          }
          case 208: {
            GreatestPopulation = input.ReadInt32();
            break;
          }
          case 216: {
            InGameHours = input.ReadInt32();
            break;
          }
          case 229: {
            DamageTakenPawns = input.ReadFloat();
            break;
          }
          case 237: {
            DamageTakenThings = input.ReadFloat();
            break;
          }
          case 245: {
            DamageDealt = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatsResponse : pb::IMessage<StatsResponse> {
    private static readonly pb::MessageParser<StatsResponse> _parser = new pb::MessageParser<StatsResponse>(() => new StatsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsResponse(StatsResponse other) : this() {
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsResponse Clone() {
      return new StatsResponse(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private int interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FutureEvent : pb::IMessage<FutureEvent> {
    private static readonly pb::MessageParser<FutureEvent> _parser = new pb::MessageParser<FutureEvent>(() => new FutureEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FutureEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEvent(FutureEvent other) : this() {
      ticks_ = other.ticks_;
      name_ = other.name_;
      quest_ = other.quest_;
      faction_ = other.faction_;
      points_ = other.points_;
      strategy_ = other.strategy_;
      arrivalMode_ = other.arrivalMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEvent Clone() {
      return new FutureEvent(this);
    }

    /// <summary>Field number for the "ticks" field.</summary>
    public const int TicksFieldNumber = 1;
    private int ticks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticks {
      get { return ticks_; }
      set {
        ticks_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quest" field.</summary>
    public const int QuestFieldNumber = 3;
    private string quest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Quest {
      get { return quest_; }
      set {
        quest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 4;
    private string faction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Faction {
      get { return faction_; }
      set {
        faction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 5;
    private float points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 6;
    private string strategy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Strategy {
      get { return strategy_; }
      set {
        strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arrival_mode" field.</summary>
    public const int ArrivalModeFieldNumber = 7;
    private string arrivalMode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArrivalMode {
      get { return arrivalMode_; }
      set {
        arrivalMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FutureEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FutureEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticks != other.Ticks) return false;
      if (Name != other.Name) return false;
      if (Quest != other.Quest) return false;
      if (Faction != other.Faction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Points, other.Points)) return false;
      if (Strategy != other.Strategy) return false;
      if (ArrivalMode != other.ArrivalMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticks != 0) hash ^= Ticks.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Quest.Length != 0) hash ^= Quest.GetHashCode();
      if (Faction.Length != 0) hash ^= Faction.GetHashCode();
      if (Points != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Points);
      if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
      if (ArrivalMode.Length != 0) hash ^= ArrivalMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticks != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ticks);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Quest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Quest);
      }
      if (Faction.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Faction);
      }
      if (Points != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Points);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strategy);
      }
      if (ArrivalMode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ArrivalMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticks);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Quest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Quest);
      }
      if (Faction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Faction);
      }
      if (Points != 0F) {
        size += 1 + 4;
      }
      if (Strategy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strategy);
      }
      if (ArrivalMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArrivalMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FutureEvent other) {
      if (other == null) {
        return;
      }
      if (other.Ticks != 0) {
        Ticks = other.Ticks;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Quest.Length != 0) {
        Quest = other.Quest;
      }
      if (other.Faction.Length != 0) {
        Faction = other.Faction;
      }
      if (other.Points != 0F) {
        Points = other.Points;
      }
      if (other.Strategy.Length != 0) {
        Strategy = other.Strategy;
      }
      if (other.ArrivalMode.Length != 0) {
        ArrivalMode = other.ArrivalMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ticks = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Quest = input.ReadString();
            break;
          }
          case 34: {
            Faction = input.ReadString();
            break;
          }
          case 45: {
            Points = input.ReadFloat();
            break;
          }
          case 50: {
            Strategy = input.ReadString();
            break;
          }
          case 58: {
            ArrivalMode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FutureEventsRequest : pb::IMessage<FutureEventsRequest> {
    private static readonly pb::MessageParser<FutureEventsRequest> _parser = new pb::MessageParser<FutureEventsRequest>(() => new FutureEventsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FutureEventsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEventsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEventsRequest(FutureEventsRequest other) : this() {
      id_ = other.id_;
      event_ = other.event_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEventsRequest Clone() {
      return new FutureEventsRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Api.FutureEvent> _repeated_event_codec
        = pb::FieldCodec.ForMessage(18, global::Api.FutureEvent.Parser);
    private readonly pbc::RepeatedField<global::Api.FutureEvent> event_ = new pbc::RepeatedField<global::Api.FutureEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.FutureEvent> Event {
      get { return event_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FutureEventsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FutureEventsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!event_.Equals(other.event_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= event_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      event_.WriteTo(output, _repeated_event_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += event_.CalculateSize(_repeated_event_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FutureEventsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      event_.Add(other.event_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            event_.AddEntriesFrom(input, _repeated_event_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FutureEventsResponse : pb::IMessage<FutureEventsResponse> {
    private static readonly pb::MessageParser<FutureEventsResponse> _parser = new pb::MessageParser<FutureEventsResponse>(() => new FutureEventsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FutureEventsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEventsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEventsResponse(FutureEventsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FutureEventsResponse Clone() {
      return new FutureEventsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FutureEventsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FutureEventsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FutureEventsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
